# Simple JSON Pattern Format Examples

# Format 1: Object with pattern names as keys
{
  "setPasswordProperty": {
    "pattern": "a1 18 00 f0 21 ec 45 f9 70 0d 00 b0 10 5a 41 f9 00 02 1f d6",
    "description": "Hardcoded password setter method",
    "enabled": true
  },
  "ssl_pinning_check": {
    "pattern": "?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? 00 01 ?? ??",
    "regex": "SSLSetSessionOption|SSLHandshake|SecTrustEvaluate",
    "description": "SSL certificate validation bypass",
    "enabled": true
  },
  "jailbreak_detection": {
    "pattern": "?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??",
    "regex": "stat.*cydia|fopen.*substrate",
    "description": "iOS jailbreak detection methods",
    "enabled": false
  },
  "auth_bypass": {
    "pattern": "?? ?? ?? ?? 00 00 ?? ?? ?? ?? ?? ?? ?? ?? ?? ??",
    "description": "Authentication bypass pattern"
  }
}

---

# Format 2: Array of pattern objects  
[
  {
    "name": "setPasswordProperty",
    "pattern": "a1 18 00 f0 21 ec 45 f9 70 0d 00 b0 10 5a 41 f9 00 02 1f d6",
    "description": "Hardcoded password setter method",
    "enabled": true
  },
  {
    "name": "ssl_pinning_check", 
    "pattern": "?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? 00 01 ?? ??",
    "regex": "SSLSetSessionOption|SSLHandshake|SecTrustEvaluate",
    "description": "SSL certificate validation bypass",
    "enabled": true
  },
  {
    "name": "keychain_access",
    "pattern": "?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??",
    "regex": "SecItemCopyMatching|SecItemAdd",
    "description": "iOS Keychain operations",
    "enabled": true
  }
]

---

# Format 3: Nested patterns object (Ghidra export compatible)
{
  "metadata": {
    "extracted_from": "target_app",
    "total_patterns": 3
  },
  "patterns": {
    "setPasswordProperty": {
      "pattern": "a1 18 00 f0 21 ec 45 f9 70 0d 00 b0 10 5a 41 f9 00 02 1f d6",
      "description": "Password property setter with hardcoded value",
      "enabled": true,
      "address": "0x1008b43a0"
    },
    "authenticate_user": {
      "pattern": "?? ?? ?? ?? ?? ?? ?? ?? 00 01 ?? ?? ?? ?? ?? ??",
      "regex": "authenticate|authorize|validate",
      "description": "User authentication methods", 
      "enabled": true
    }
  }
}

---

# Format 4: Minimal patterns (string values)
{
  "hardcoded_password": "a1 18 00 f0 21 ec 45 f9 70 0d 00 b0 10 5a 41 f9 00 02 1f d6",
  "ssl_bypass": "?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? 00 01 ?? ??",
  "auth_check": "?? ?? ?? ?? 00 00 ?? ?? ?? ?? ?? ?? ?? ?? ?? ??"
}

---

# iOS Security Testing Patterns (ios_patterns.json)
{
  "ssl_pinning_bypass": {
    "pattern": "?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? 00 01 ?? ??",
    "regex": "SSLSetSessionOption|SSLHandshake|SecTrustEvaluate|SSLWrite|SSLRead",
    "description": "iOS SSL pinning and TLS validation methods",
    "enabled": true
  },
  "keychain_operations": {
    "pattern": "?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??", 
    "regex": "SecItemCopyMatching|SecItemAdd|SecItemUpdate|SecItemDelete",
    "description": "iOS Keychain access patterns for credential extraction",
    "enabled": true
  },
  "biometric_auth": {
    "pattern": "?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??",
    "regex": "LAContext|evaluatePolicy|biometricType|TouchID|FaceID",
    "description": "iOS biometric authentication (Touch ID / Face ID)",
    "enabled": true
  },
  "jailbreak_detection": {
    "pattern": "?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??",
    "regex": "stat.*cydia|fopen.*substrate|access.*/Applications/Cydia",
    "description": "iOS jailbreak detection mechanisms",
    "enabled": true
  },
  "url_scheme_handlers": {
    "pattern": "?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??",
    "regex": "application.*openURL|canOpenURL|handleOpenURL",
    "description": "URL scheme handlers for deep link vulnerabilities",
    "enabled": true
  },
  "anti_debugging": {
    "pattern": "?? ?? ?? ?? 1a 00 80 d2 ?? ?? ?? ?? ?? ?? ?? ??",
    "regex": "ptrace|sysctl|getppid|PT_DENY_ATTACH",
    "description": "Anti-debugging and anti-analysis techniques", 
    "enabled": true
  },
  "certificate_validation": {
    "pattern": "?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??",
    "regex": "SecTrustSetPolicies|SecTrustSetAnchorCertificates|SecTrustEvaluate",
    "description": "Certificate trust validation bypass points",
    "enabled": true
  }
}

---

# Android Security Patterns (android_patterns.json)
{
  "root_detection": {
    "pattern": "?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??",
    "regex": "su|busybox|superuser|rootcloak|RootTools",
    "description": "Android root detection methods",
    "enabled": true
  },
  "ssl_pinning_android": {
    "pattern": "?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??", 
    "regex": "checkServerTrusted|verify|TrustManager|CertificatePinner",
    "description": "Android SSL certificate pinning",
    "enabled": true
  },
  "anti_debugging_android": {
    "pattern": "?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??",
    "regex": "isDebuggerConnected|Debug.isDebuggerConnected|JDWP",
    "description": "Android anti-debugging checks",
    "enabled": true
  },
  "signature_verification": {
    "pattern": "?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??",
    "regex": "getPackageInfo|GET_SIGNATURES|checkSignatures",
    "description": "APK signature verification bypass",
    "enabled": true
  }
}